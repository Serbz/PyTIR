import numpy, PIL, cv2, os, string, time, colorsys, math, datetime, asyncio, matplotlib, struct, shutil
from PIL import Image
from matplotlib import pyplot as plt

wdir = r"D:\\GP\\PyGAud - PyTIR - TTS\\PyTIR\\"
now = datetime.datetime.now()
t = now.strftime("%d%m%y_%H%M%S")
inputFile = open(fr"{wdir}\PyTIR.py", "r")
exportFile = open(fr"{wdir}\bak\PyTIR{t}.py", "w")
for line in inputFile:
    new_line = line.replace('\t', '    ')
    exportFile.write(new_line)
inputFile.close()
exportFile.close()

npifc = "Process1-2-all_frames"
print(npifc, "line 14")
try:
    os.mkdir(fr"{wdir}\npi\{npifc}")
except:
    pass
try:
    os.mkdir(fr"{wdir}\npi\{npifc}\diff")
except:
    pass
####### CONVERT BGR TO RGB
def BGRRGB(imnp):
    imnpn2 = []
    for each in imnp:
        imnpn1 = []
        for each in each:
            imnpn1.append([each[2], each[1], each[0]])
        imnpn2.append(imnpn1)
    imnp = imnpn2
    imnpn2 = []
    imnpn1 = []
    return imnp

def make_imnp(path):
    im = Image.open(fr'{path}')
    #im = cv2.imread(fr'{path}')
    #w, h = im.shape
    imnp = numpy.asarray(im)
    return imnp

def make_hsv(pixels):
    pixels = numpy.array(pixels, dtype=numpy.uint8)
    hsv = cv2.cvtColor(pixels, cv2.COLOR_BGR2HSV)
    h, s, v = hsv[:,:,0], hsv[:,:,1], hsv[:,:,2]
    im = Image.fromarray(numpy.array(hsv, dtype=numpy.uint8))
    return hsv, im, h, s, v
    
def make_img_from_hsv(pixels, name):
    pixels = cv2.cvtColor(numpy.array(pixels, dtype=numpy.uint8), cv2.COLOR_HSV2RGB)
    im = Image.fromarray(numpy.array(pixels, dtype=numpy.uint8))
    cv2.imwrite(fr'{wdir}\{name}.png', numpy.asarray(im))
    im = cv2.imread(fr"{wdir}\{name}.png")
    return im
    
def make_img(pixels, name):
    #pixels = cv2.cvtColor(numpy.array(pixels, dtype=numpy.uint8), cv2.COLOR_HSV2RGB)
    im = Image.fromarray(numpy.array(pixels, dtype=numpy.uint8))
    cv2.imwrite(fr'{wdir}\{name}.png', numpy.asarray(im))
    im = cv2.imread(fr"{wdir}\{name}.png")
    return im

def vertical_pixels(pixels):
    pixelSel = []
    for each in imnp:
        pixel = each[int(len(each)/2)]
        pixelSel.append([pixel])
    return pixelSel
    
def get_lumens(pixels):
    lumens = []
    for each in pixels:
        for peach in each:
            lumen = peach[2]
            lumens.append(lumen)
    return lumens



#process2
#supposed to group the image into multiple images based on average pixel brightness
#but its autistic
def group_im(hsv):
    row_count = -1
    #groupsB.append(0,0,0)
    hsv = numpy.asarray(hsv.copy())
    groupsB = []
    groupsA = []
    group_index_max = 0
    for row in hsv:
        b = None
        row_count += 1
        px_count = -1
        avg_px_count = 0
        max_b = 0
        min_b = 255
        px_avg = 0
        px_t = 0
        o_b = 0
        group_index = 0
        range_v = 0
        row_break_in_row = -1
        for px in row:
            b = px[2]
            px_count += 1
            avg_px_count += 1
            px_t += b
            px_avg = int(px_t / avg_px_count)
            if avg_px_count > 5 and (b < (px_avg-range_v) or b > (px_avg+range_v)) and (min_b != 255 and min_b != max_b):
                if len(groupsB) != 0:
                    for each in groupsB:
                        if each[0] >= group_index:
                            group_index = each[0]+1
                            # group_index_max = group_index
                            # group index max is pretty useless
                        if b >= each[3]-each[4] and b <= each[3]+each[4]:
                            group_index = each[0]
                            #print(fr"px[2]: {b}", fr"px_avg: {each[3]}", fr"range_v: {each[4]}", \
                            #    fr"range min: {each[3]-each[4]}", fr"range max: {each[3]+each[4]}", \
                            #        fr"group_index: {group_index}_{each[0]}")
                            break
                row_break_in_row += 1
                groupsB.append([group_index, row_count, px_count, px_avg, range_v, b, row_break_in_row])
                                   # 0             1           2       3       4       5       6
                                   #so honestly probably don't group this way anyway,
                                   # instead just figure out a way to re-write to multiple images
                                   # as it is grouped... think of 1 array and many images
                                   # then split into images
                                   # and process
                avg_px_count = 0
                max_b = 0
                min_b = 255
                px_avg = 0
                px_t = 0
            if b > max_b:
                max_b = b
            if b < min_b:
                min_b = b
            range_v = (max_b-min_b)*3 # *3 is too few *2 is too many
            o_b = b
    #### THE ENTIRE CODE BELOW DOES NOT WORK AS INTENDED, FEEL FREE TO RE-WRITE
        # It is supposed to make a new image per group, however, have a look
        # The images its created per group, aren't even grouped correctly for starters
        # so whatever have fun.
    print(fr"groupsB len: {len(groupsB)}, group_index_max: {group_index_max}")
    group_index_counter = -1
    groupsB_counter = -1
    print(group_index_max)
    while group_index_counter < len(groupsB):
        img_row = []
        img = []
        group_index_counter += 1
        for each in groupsB:
            groupsB_counter += 1
            if group_index_counter == each[0]:
                row_count = -1
                row_break = each[1]
                px_break = each[2]
                row_count = -1
                for row in hsv:
                    img_row = []
                    row_count += 1
                    px_count = -1
                    if groupsB_counter+1 >= len(groupsB):
                        next_row_break = len(hsv)
                    else:
                        next_row_break = groupsB[groupsB_counter+1][1]
                    if row_count >= row_break and row_count < next_row_break:
                        px_count += 1
                        if each[6] > 0: #row_break_in_row is not 0
                            for vals in groupsB:
                                if vals[1] == row_break and vals[6] == each[6]-1: #if row is correct row and row_in_row_break is less than the next
                                    for px in row:
                                        px_count += 1
                                        if px_count >= vals[2] and px_count <= each[2]: #if the pixels are between row_in_row_breaks
                                            img_row.append(px)
                                        else:
                                            img_row.append([0,0,0])
                        else:
                            img_row.append(row)
                    if img_row != []:
                        #print(numpy.asarray(img_row).shape)
                        img.append([row_count, img_row[0]])
        count = 0
        if img != []:
            while count < len(img)-1:
                o_row_count = -1
                img2 = []
                img2_row = []
                for ea in img:
                    row_count = ea[0]
                    #print(row_count, len(img2))
                    #if not (row_count >= len(img)):
                    while count > o_row_count and count < row_count:
                        count += 1
                        for px in hsv[0]:
                            img2_row.append([180,255,255])
                        
                        img2.append(img2_row)
                        #print(numpy.asarray(img2).shape, count, row_count)
                        #print(numpy.asarray(img2_row).shape, count, row_count)
                        img2_row = []
                    img2.append(ea[1])
                    #print(numpy.asarray(img2).shape, "2")
                    #print(numpy.asarray(ea[1]).shape())
                    o_row_count = count
                    count += 1
            #print(numpy.asarray(img2).shape)
            #print(numpy.asarray(img).shape)
            img2_row = []
            while len(img2) < (len(hsv)):
                count += 1
                px_count = -1
                while px_count < len(hsv[0])-1:
                    px_count += 1
                    img2_row.append([180,255,255])
                #print(numpy.asarray(img2_row).shape)
                img2.append(numpy.asarray([img2_row]))
                #print(numpy.asarray(img2).shape, "")
                img2_row = []

            #print(numpy.asarray(img2).shape)
            #print(numpy.asarray(hsv).shape)
            #try:
            #    os.remove("{wdir}\out.log")
            #    os.remove("{wdir}\out2.log")
            #except:
            #    pass
            #try:
            #    os.system("cmd.exe /c echo >> {wdir}\out.log")
            #    os.system("cmd.exe /c echo >> {wdir}\out2.log")
            #except:
            #    pass
            #with open("{wdir}\out.log", "w") as f:
            #    for each in list(img2):
            #        f.write(fr"{each}")
            #f.close()
            #with open("{wdir}\out2.log", "w") as f:
            #    for each in numpy.asarray(hsv):
            #        f.write(fr"{each}")
            #f.close()
                
            img2 = numpy.asarray(img2, dtype=numpy.uint8)
            print(numpy.array(img2).shape)
            #sometimes even the image shape is wrong
            #the entire process needs re-thought, and remade tbh but the ideas here
            #could... maybe help.
            now = datetime.datetime.now()
            t = now.strftime("%H%M%S_%f")
            make_img_from_hsv(img2, fr"./npi/{npifc}/npi_group_num{group_index_counter}_{t}")
            img2 = []

    
    return        

#This works properly, part of process1, groups based on 1 pixel wide vertical line down middle.
def eval_pixel_avgs(lumens, verticalPixels, diff_val=2, pixel_skip=525):
    diff_val_op = 0
    averageGroups = []
    counter0 = 0
    while len(averageGroups) <= 3 or len(averageGroups) >= 10:
        averageGroups = []
        diff_val_op = 0
        counter0 += 1
        if diff_val <= 0 or counter0 > 25:
            return None, None
        if len(averageGroups) <= 3:
            if diff_val_op == -1:
                return None, None
            diff_val_op = 1
        if len(averageGroups) >= 10:
            if diff_val_op == 1:
                return None, None
            diff_val_op = -1
        if len(averageGroups) <= 2:
            averageGroups = []
        diff_val += diff_val_op
        counter = -1
        diff = None
        o_diff = None
        difflist2 = []
        difflist = []
        groupIndex = -1
        averages = []
        #####   Group by lumens, but average h s and v in those groups #####
        for each in lumens:
            counter += 1
            o_diff = diff
            diff = abs(int(lumens[counter-1])-int(each))
            difflist.append([diff, lumens[counter-1], each])
            if o_diff is not None:
                difflist2.append(abs(o_diff-diff))
                if abs(o_diff-diff) > diff_val and lumens[counter] > 25: #and counter > pixel_skip:
                    average = 0
                    average_num = 0
                    hsv_index = -1
                    groupIndexVal = groupIndex
                    while hsv_index <= 1:
                        hsv_index += 1
                        groupIndex = groupIndexVal
                        while groupIndex <= counter:
                            groupIndex += 1
                            average_num += 1
                            average += verticalPixels[groupIndex][0][hsv_index]
                            if groupIndex == counter:
                                average = int(math.ceil(average/average_num))
                                averages.append((average, hsv_index))
                                average = 0
                                average_num = 0
            if averages != []: #and groupIndex > 5:
                averageGroups.append([groupIndex, averages])
                averages = []
            if counter >= len(imnp)/2:
                break
    return averageGroups, diff_val

#corrects hsv values
#I think..
def eval_group_avgs(averageGroups):
    groupAverages = []
    counter = 0
    hsv0=0
    hsv1=0
    hsv2=0
    for each in averageGroups:
        counter+=1
        #print(each)
        hsv0 += each[1][0][0]
        hsv1 += each[1][1][0]
        hsv2 += each[1][2][0]
    hsv0 = hsv0/counter
    hsv1 = hsv1/counter
    hsv2 = hsv2/counter
    groupAverages.append([hsv0, 0]) 
    groupAverages.append([hsv1, 1]) 
    groupAverages.append([hsv2, 2]) 
    return groupAverages


#changes pixel by pixel based on the vertical lumens
def pixel_changes(npi, im, averageGroups=None, groupAverages=None, diff_val=None, op=None, frame_num=0, hist_avg=None, color=None, lcounter=0):
    counter = -1
    #print(npi[int(len(npi)/2)])
    npi = numpy.asarray(npi.copy()).copy()
    im = numpy.asarray(im.copy()).copy()
    row = []
    npi3 = None
    n_count = 0
    lastavg = None
    m = 0
    if averageGroups is not None:
        m = 1
        average = averageGroups[0]
        print(average)
    elif hist_avg is not None:
        m = 2
        average = hist_avg
    else:
        print("averageGroups and hist_avg both none")
        return
    print(npi[0][int((len(npi[0])-1)/2)], im[0][int((len(im[0])-1)/2)], n_count)      
    counter += 1
    npi2 = []
    counter2 = -1
    for pixel_row in npi:
        row = []
        counter2+=1
        imr = im[counter2]
        counter3 = -1
        for pixel in pixel_row:
            counter3+=1
            imp = imr[counter3]
            if color is None:
                pxc_sel = 2
                #use hsv value
            else:
                if color == "red" or color == "value":
                    pxc_sel = 2
                elif color == "green":
                    pxc_sel = 1
                elif color == "blue":
                    pxc_sel = 0
                else:
                    print("color not red/green/blue/value")
                    return
            for pxc in [pxc_sel]:#, 1, 2]:
                if pxc == 0:
                    var = 175
                else:
                    var = 240

                px_o = pixel[pxc]
                if (pixel[pxc] > 25): #or (pixel[pxc] >= 1):
                    #print(pixel[pxc])
                    if m == 1:
                        #lastavg = average[1][pxc][0]
                        lastavg = averageGroups[len(averageGroups)-1]
                        if op is True:
                            pixel[pxc] = (lastavg[1][pxc][0]/average[1][pxc][0])*pixel[pxc]
                            pixel[pxc] = ((pixel[pxc]-(lastavg[1][pxc][0]-average[1][pxc][0]))/255)*(pixel[pxc]*2)                          
                        if op is False:
                                        
                            pixel[pxc] = ((255/(pixel[pxc]*2))*((abs(pixel[pxc]-lastavg[1][pxc][0])+pixel[pxc]-lastavg[1][pxc][0])))+(pixel[pxc])
                    elif m == 2:
                        if average > pixel[pxc]:
                            pixel[pxc] = (pixel[pxc]/average)*200 # 80 = 130 @avg 147 with mult 240
                        else:
                            pixel[pxc] = (average/pixel[pxc])*255 # 200 = 176 @avg 147 with mult 240
                if pixel[pxc] > var:
                    pixel[pxc] = var
                if pixel[pxc] < 0:
                    pixel[pxc] = 0
            row.append(pixel)
        #print(pixel[pxc], pixel)
        npi2.append(row)
        row = []
    #lastavg = None
    if npi2 is not None and npi2 != []:
        n_count += 1
        npi = npi2
        npi3 = npi2
        print(npi[0][int((len(npi[0])-1)/2)], im[0][int((len(im[0])-1)/2)], n_count) 
        now = datetime.datetime.now()
        t = now.strftime("%H%M%S_%f")
        make_img_from_hsv(npi2, fr"./npi/{npifc}/npi_frame{frame_num}_{lcounter}_{str(color)}_{t}")
        make_sub_diff_ims(im, npi3, str(n_count)+"_"+str(t), frame_num=frame_num, path=fr"{frame_num}_{lcounter}_{str(color)}_{t}")
        npi2 = []
        npi3 = []
        #print(fr"Pixel Change loop: {n_count}")
        #print(fr"npi_{n_count}_{t}")
    return npi, im


#This is not a difference its subtraction
#idk formulas for difference, exclusion, etc, get these
def make_sub_diff_ims(hsv, npi, npi_num=0, frame_num=0, path=None):
    newpx = []
    newimpx = []
    print("make_sub",hsv[0][0])
    counter3 = -1
    #print(npi[counter3+1][int(len(npi[counter3+1])-1/2)])
    for row in hsv:
        counter3 += 1
        x = npi[counter3]
        counter = -1
        for px in row:
            counter += 1
            counter4 = -1
            pxp = []
            while counter4 < 2:
                counter4 += 1
                v1 = int(x[counter][counter4])
                v2 = int(px[counter4])
                v3 = 0
                if v1 >= v2:
                    v3 = v1 - (v2)
                else:
                    v3 = v2 - (v1)
                pxp.append(v3)
                if counter4 == 0:
                    if pxp[0] < 0:
                        pxp[0] = abs(pxp[0])
                    if pxp[0] > 180:
                        pxp[0] = abs(pxp[0])-180
                else:
                    if v3 > 255:
                        pxp[counter4] = ((v3)-255) #9 was /2 here
                    if v3 < 0:
                        pxp[counter4] = (255+(v3)) # and here
                    
            #pxp.append(int(px[2]) - int(x[counter][2]))

            newpx.append([pxp[0],pxp[1],pxp[2]])
        newimpx.append(newpx)
        newpx = []
    now = datetime.datetime.now()
    t = now.strftime("%H%M%S_%f")
    if path is None:
        path = fr"npi\{npifc}\diff\Diff_npi{npi_num}_Frame{frame_num}_{t}"
    else:
        path = fr"./npi/{npifc}/diff/"+path
    make_img_from_hsv(newimpx, path)
    newimpx = []
    return

def Merge(dict1, dict2):
    return {**dict1, **dict2}

def save_dict(di_, filename_):
    with open(filename_, 'wb') as f:
        pickle.dump(di_, f)
    return    
def load_dict(filename_):
    with open(filename_, 'rb') as f:
        ret_di = pickle.load(f)
    return ret_di


def get_histogram_data(imnp, counter):
    chans = cv2.split(imnp.copy())
    colors = ("blue", "green", "red")
    hsv_px, im, h, s, v = make_hsv(imnp)
    hist_v = cv2.calcHist(v, [0], None, [514], [0, 256])
    #print(hist_v)
    #chans = [*chans]
    #chans.append(v)
    #print(chans)
    for each, color in zip(chans, colors):
        #print(each.shape, each.size, each.shape, each.size)
        now = datetime.datetime.now()
        t = now.strftime("%H%M%S_%f")
        make_img(each, fr"npi\{npifc}\Frame{counter}_Channel_{color}_{t}")

    hist_dict = {}
    #chans = Merge(chans, chans2)
    #colors = Merge(colors, colors2)
    #print(colors)
    for (chan, color) in zip(chans, colors):
        hist = cv2.calcHist([chan], [0], None, [514], [0, 256])
        #print(hist.size, hist.shape)
        #print(hist)
        with open(fr"{wdir}\logs\Histogram_Frame{counter}_{color}.log", "w") as f:
            f.write(str(hist))
        f.close()
        hist_dict = Merge(hist_dict, {fr"{color}": hist})
        
        plt.figure()
        plt.title("'Flattened' Color Histogram")
        plt.xlabel("Bins")
        plt.ylabel("# of Pixels")
        color2 = color
        #if color == "value":
        #    color2 = "blue"
        plt.plot(hist, color=color2)
        plt.xlim([0, 256])
        #plt.show()
        now = datetime.datetime.now()
        t = now.strftime("%H%M%S_%f")
        plt.savefig(fr"{wdir}\npi\{npifc}\Histogram_Frame{counter}_{color}_{t}")
        
    hist_dict = Merge(hist_dict, {fr"value": hist_v})    
    #hist = cv2.calcHist(v, [0], None, [514], [0, 256])
    #with open(fr"{wdir}\logs\Histogram_Frame{counter}_hsvValue.log", "w") as f:
    #    f.write(str(hist))
    #f.close()

    #numpy.save(fr"{wdir}\logs\hist_dict_Frame{counter}.npy", hist_dict)
    with open(fr"{wdir}\logs\hist_dict_Frame{counter}.log", "w") as f:
        f.write(str(hist_dict))
    f.close()
    with open(fr"{wdir}\logs\chans.log", "w") as f:
        f.write(str(chans))
    f.close()   
    #histogram1 = cv2.calcHist(imnp.copy(), [0], None, [256], [0, 256])
    #histogram2 = cv2.calcHist(hsv_px.copy(), [0], None, [256], [0, 256])
    return hist_dict

def min_max_avg_hist(histdata, framenum):
    minv = 9999999999
    maxv = 0
    minvs = 0
    maxvs = 0
    histcalc = {}
    for k, v in histdata.items():
        counter = -1
        h_a = 0
        for h in v:
            counter += 1
            h_a += h
            if numpy.float32(h[0]) < minv:
                minv = int(h[0])
                minvs = counter
            if numpy.float32(h[0]) > maxv:
                maxv = int(h[0])
                maxvs = counter
        h_a = h_a/counter
        diff_h_a_c = 0
        diff_h_a = []
        o_diff_h_a_c = 9999999999
        counter = -1
        for h in v:
            counter += 1
            diff_h_a_c = abs(h - h_a)
            if diff_h_a_c < o_diff_h_a_c:
                diff_h_a = [h, counter]
                o_diff_h_a_c = diff_h_a_c
                #print(diff_h_a_c, h, h_a, diff_h_a)
        histcalc.setdefault(k, dict(Min=[minv, minvs], Max=[maxv, maxvs], Avg=diff_h_a, Frame=framenum))
    return histcalc

def process1(imnp, counter):
    hsv_px, im, h, s, v = make_hsv(imnp.copy())
    op = True
    loop_counter = 0
    while loop_counter < 2:
        loop_counter += 1
        hsv_px_check = ""
        hsv_px_check += f"268: {hsv_px[0][0]}\n"
        print(counter, loop_counter)
        verticalPixels = vertical_pixels(hsv_px.copy())
        #print("Length verticalPixels: ",len(verticalPixels))
        verticalLumens = get_lumens(verticalPixels)
        #print("Length verticalLumens: ",len(verticalLumens))
        averageGroups, diff_val = eval_pixel_avgs(verticalLumens, verticalPixels)
        if averageGroups is not None:
            #print(fr"################ {len(averageGroups)} averageGroups")
            #print(averageGroups)
            groupAverages = eval_group_avgs(averageGroups)
            #print(fr"################ {len(groupAverages)} groupAverages")
            #print(groupAverages)
            hsv_px_check += f"282: {hsv_px[0][0]}\n"
            op = not op
            imnp, im = pixel_changes(hsv_px.copy(), im.copy(), averageGroups=averageGroups, groupAverages=groupAverages, diff_val=diff_val, op=op, frame_num=counter, hist_avg=None, color=None, lcounter=loop_counter)
            hsv_px_check += f"line 285: {numpy.asarray(imnp.copy())[0][0]}\n"
            hsv_px = numpy.asarray(imnp.copy())
            print(hsv_px_check)
    return

def process2(imnp, counter):
    hsv_px, im, h, s, v = make_hsv(imnp)
    group_im(hsv_px)
    return

def process3(framelist): #using framelist, not sure why but i did
    hist_paths = []
    for each in framelist:
        framenum = each[1]
        imnp = make_imnp(each[0])
        histdata = get_histogram_data(imnp, framenum)
        histcalc = min_max_avg_hist(histdata, framenum)
        #print(histcalc)
        for key, val in histcalc.items():
            hist_avg = val.get('Avg')[1]
            if key == "value":
                hsv_px, im, h, s, v = make_hsv(imnp)
                #print(hsv_px[int(len(hsv_px)/2)])
                imnp, im = pixel_changes(hsv_px.copy(), im.copy(), averageGroups=None, groupAverages=None, diff_val=None, op=None, frame_num=framenum, hist_avg=hist_avg, color=key)
            else:
                #print(imnp[int(len(imnp)/2)])
                imnp, im = pixel_changes(imnp.copy(), imnp.copy(), averageGroups=None, groupAverages=None, diff_val=None, op=None, frame_num=framenum, hist_avg=hist_avg, color=key)       
    return

####### EXPORT FRAMES
####### GET MP4 INFO

#mp4Path = input("Specify mp4 path: ")
#remove later replace with above
mp4Path = fr"VID_20230115_004343.mp4"
mp4Path = fr"VID_20230115_000843.mp4"
#mp4Path = fr"VID_20230115_003548.mp4"
mp4Path = fr"VID_20230116_182920.mp4"
mp4 = mp4Path.replace('\"', '')
mp4 = mp4.replace('\\', '/')
mp4 = mp4.split("/")
for each in mp4:
    mp4 = each
mp4 = mp4.split(".")
mp4 = str(mp4[0])
framePath = fr"{wdir}\{mp4}"
try:
    os.mkdir(framePath)
except FileExistsError:
    pass
#os.system(fr"ffmpeg -i {wdir}\VID_20230115_004343.mp4 {wdir}\VID_20230115_004343\{mp4}%d.png")
numFrames = 0
for each in os.listdir(fr"{framePath}"):
    numFrames += 1
#frameSel = 4
counter = 0
#print(os.listdir(framePath), framePath)
framelist = []
for frame in os.listdir(framePath):
    #counter += 1
    #if counter == frameSel:
    if list(frame.split(".")[::-1])[0] != "md5":
        frameSel = str(framePath+r"/"+frame)
        #while True:
        counter += 1
        if counter >= 57: #or counter == 80:
            shutil.copy(frameSel, fr'{wdir}/npi/{npifc}/{mp4}_Frame{counter}_original.{list(frame.split(".")[::-1])[0]}')
            imnp = make_imnp(frameSel)
            #process2(imnp, counter)
            framelist.append([frameSel, counter])
            process1(imnp.copy(), counter)
process3(framelist)


#imnp = BGRRGB(imnp)

#counter = 0
#while counter <= 5:
quit()
os.exit()
print(  
'''

    
    
inBlack  = np.array([0, 0, 0], dtype=np.float32)
inWhite  = np.array([255, 255, 255], dtype=np.float32)
inGamma  = np.array([1.0, 1.0, 1.0], dtype=np.float32)
outBlack = np.array([0, 0, 0], dtype=np.float32)
outWhite = np.array([255, 255, 255], dtype=np.float32)

img = np.clip( (img - inBlack) / (inWhite - inBlack), 0, 255 )                            
img = ( img ** (1/inGamma) ) *  (outWhite - outBlack) + outBlack
img = np.clip( img, 0, 255).astype(np.uint8)


cv2.calcHist(images, channels, mask, histSize, ranges)



    Separate the source image in its three R,G and B planes. For this we use the OpenCV function cv::split :

    vector<Mat> bgr_planes;
    split( src, bgr_planes );

our input is the image to be divided (this case with three channels) and the output is a vector of Mat )

    Now we are ready to start configuring the histograms for each plane. Since we are working with the B, G and R planes, we know that our values will range in the interval [0,255]
    Establish the number of bins (5, 10...):

    int histSize = 256;

    Set the range of values (as we said, between 0 and 255 )

    float range[] = { 0, 256 }; //the upper boundary is exclusive
    const float* histRange[] = { range };

    We want our bins to have the same size (uniform) and to clear the histograms in the beginning, so:

    bool uniform = true, accumulate = false;

    We proceed to calculate the histograms by using the OpenCV function cv::calcHist :

    Mat b_hist, g_hist, r_hist;
    calcHist( &bgr_planes[0], 1, 0, Mat(), b_hist, 1, &histSize, histRange, uniform, accumulate );
    calcHist( &bgr_planes[1], 1, 0, Mat(), g_hist, 1, &histSize, histRange, uniform, accumulate );
    calcHist( &bgr_planes[2], 1, 0, Mat(), r_hist, 1, &histSize, histRange, uniform, accumulate );

    where the arguments are (C++ code):
        &bgr_planes[0]: The source array(s)
        1: The number of source arrays (in this case we are using 1. We can enter here also a list of arrays )
        0: The channel (dim) to be measured. In this case it is just the intensity (each array is single-channel) so we just write 0.
        Mat(): A mask to be used on the source array ( zeros indicating pixels to be ignored ). If not defined it is not used
        b_hist: The Mat object where the histogram will be stored
        1: The histogram dimensionality.
        histSize: The number of bins per each used dimension
        histRange: The range of values to be measured per each dimension
        uniform and accumulate: The bin sizes are the same and the histogram is cleared at the beginning.
    Create an image to display the histograms:

    int hist_w = 512, hist_h = 400;
    int bin_w = cvRound( (double) hist_w/histSize );
    Mat histImage( hist_h, hist_w, CV_8UC3, Scalar( 0,0,0) );
''')







